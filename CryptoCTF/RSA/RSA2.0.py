

def gen_key(e, nbit):
        p = getPrime(nbit << 2)
        q = getPrime(nbit >> 2)
        print 'p =', p
        print 'q =', q
        n = p * q
        return (e, n)



enc = (116993758850446213440642069973918042570394112253143952523042630069977528705577620189529464800487440618150840134169608714977540348941187326504878867880757045466597797382968419296455934994993165943371020622631547291253918673431510211608720296968266492285764781800991852515440335186522805425786531302L, 117653443212940604601502946267123935688745383632793608206346454704946067913475647818848889454493851131704652315583747472187677528090297469336574036619567790019564098336520464916997946615273196426286773240945257714342401309962328497752883169016534020157920938496205452427365870556687858089020994990L)





















print(hey)

n = "3ff77ad8783e006b6a2c9857f2f13a9d896297558e7c986c491e30c1a920512a0bad9f07c5569cf998fc35a3071de9d8b0f5ada4f8767b828e35044abce5dcf88f80d1c0a0b682605cce776a184e1bcb8118790fff92dc519d24f998a9c04faf43c434bef6c0fa39a3db7452dc07ccfced9271799f37d91d56b5f21c51651d6a9a41ee5a8af17a2f945fac2b1a0ea98bc70ef0f3e37371c9c7b6f90d3d811212fc80e0abcd5bbefe0c6edb3ca6845ded90677ccd8ff4de2c747b37265fc1250ba9aa89b4fd2bdfb4b4b72a7ff5b5ee67e81fd25027b6cb49db610ec60a05016e125ce0848f2c32bff33eed415a6d227262b338b0d1f3803d83977341c0d3638f"
c = "2672cade2272f3024fd2d1984ea1b8e54809977e7a8c70a07e2560f39e6fcce0e292426e28df51492dec67d000d640f3e5b4c6c447845e70d1432a3c816a33da6a276b0baabd0111279c9f267a90333625425b1d73f1cdc254ded2ad54955914824fc99e65b3dea3e365cfb1dce6e025986b2485b6c13ca0ee73c2433cf0ca0265afe42cbf647b5c721a6e51514220bab8fcb9cff570a6922bceb12e9d61115357afe1705bda3c3f0b647ba37711c560b75841135198cc076d0a52c74f9802760c1f881887cc3e50b7e0ff36f0d9fa1bfc66dff717f032c066b555e315cb07e3df13774eaa70b18ea1bb3ea0fd1227d4bac84be2660552d3885c79815baef661"

n = int(n, 16)
c = int(c, 16)
e = 31337
print(n)

top = 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215
value = top

print(hey)
while True:
    value -= 1
    print(value)
    if n % value == 0:
        print(value)
        print(n//value)






print(hey)

base = ['0'*1024]
print(base)
print(hey)
p = int('0'*1024, 2)
q = int('1'+'0'*1023, 2)
print(a*b)



print("")
print(hey)

final = ""

# Compute modular inverse of e
def egcd(a, gcd):
    d,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = gcd//a, gcd%a
        m, n = d-u*q, y-v*q
        gcd,a, d,y, u,v = a,r, u,v, m,n
    return gcd, d, y


p = 70951   
q = 71023  
n = p * q
print(n)
phi = (p - 1) * (q - 1)
print(phi)
gcd, d, b = egcd(65537, phi)
print(gcd)
print(d)
print(b)

print(boom)
#blah = (int(input())**3) % 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331

blah = (1 % 901091274727778724973872743984042705573651919653887134909340834070666823180884054019537401591616803141618685983641605333825047700377657673685413753827981004240975876594803444361388132450412070733421354449104670392240940672956451637139480494690903764604789188034794006713273087480494389371967296093237804332487757593409093438353748085945318825329153968627093588103916066829804448903024435602817414376532258693836506353033179860311328667309900025944089488168423118630228422519342699990775286751420420964098081740666996274683709244890669234472057295873205391581140236952646566617795496490825962415643121620112820774688)

def main():
    #p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    #q = 156408916769576372285319235535320446340733908943564048157238512311891352879208957302116527435165097143521156600690562005797819820759620198602417583539668686152735534648541252847927334505648478214810780526425005943955838623325525300844493280040860604499838598837599791480284496210333200247148213274376422459183    
    e = 65537
    ct = 313988037963374298820978547334691775209030794488153797919908078268748481143989264914905339615142922814128844328634563572589348152033399603422391976806881268233227257794938078078328711322137471700521343697410517378556947578179313088971194144321604618116160929667545497531855177496472117286033893354292910116962836092382600437895778451279347150269487601855438439995904578842465409043702035314087803621608887259671021452664437398875243519136039772309162874333619819693154364159330510837267059503793075233800618970190874388025990206963764588045741047395830966876247164745591863323438401959588889139372816750244127256609

    #p = 1
    #q = 13780994879977411380937809283029526317166578132419457476977686289564770256342573
    e = 65537
    ct = 11902034578056734410418756090953419033087989840789253001742125818030707905016678

    ct = 6374641754272778193650813983274931836308566779335492928390041042195072800495974
    e = 65537

    # compute n
    #n = p * q

    # Compute phi(n)
    #phi = (p - 1) * (q - 1)

    phi = 8178627025287563722198024269252732299094962880589049224991715826846179388293120
    n = 16939164596003116544844398987020923305936438226150754006686277409158422368255573

    # Compute modular inverse of e
    gcd, d, b = egcd(e, phi)

    print( "d:  " + str(d) );

    if d < 0:
        d += phi
        print( "d:  " + str(d) );

    # Decrypt ciphertext
    #pt = pow((ct^-1) % n, d, n)
    pt = pow(ct, d, n)
    #pt = pow(1/ct, d) % n
    print( "pt: " + str(pt) )

#If a ≡ b (mod n), then it is false, in general, that k^a ≡ k^b (mod n). However, one has:
#If c ≡ d (mod φ(n)), then a^c ≡ a^d (mod n) provided a is coprime with n

if __name__ == "__main__":
    main()

#d⋅e ≡ 1 (mod φ(n))

#print(blah)
#print(1 % 5)
    
#nc 2018shell2.picoctf.com 50430
#8815769761
#77773
#n
#6256003596
#26722917505435451150596710555980625220524134812001687080485341361511207096550823814926607028717403343344600191255790864873639087129323153797404989216681535785492257030896045464472300400447688001563694767148451912130180323038978568872458130612657140514751874493071944456290959151981399532582347021031424096175747508579453024891862161356081561032045394147561900547733602483979861042957169820579569242714893461713308057915755735700329990893197650028440038700231719057433874201113850357283873424698585951160069976869223244147124759020366717935504226979456299659682165757462057188430539271285705680101066120475874786208053
#n
#1405046269503207469140791548403639533127416416214210694972085079171787580463776820425965898174272870486015739516125786182821637006600742140682552321645503743280670839819078749092730110549881891271317396450158021688253989767145578723458252769465545504142139663476747479225923933192421405464414574786272963741656223941750084051228611576708609346787101088759062724389874160693008783334605903142528824559223515203978707969795087506678894006628296743079886244349469131831225757926844843554897638786146036869572653204735650843186722732736888918789379054050122205253165705085538743651258400390580971043144644984654914856729
#

#19311495761626752791116396889416547493244795656774043473944038787553254664430010194101410099972404538423609294657929109126324560119628841599786265285124359936343507325502054026566435627200756651531136675298264887196873512078584362862409400618000996104583716328309007132662287384463886126915663556428384733990385117129808714590135291416675215318811089381360923641872021702572201124276049053940837438575186765397781752873300443295066462980607209388483218336602778404890813637196992699701295985714122045906110346173865685731243726344929890120881893744288220915531970108467251337650484297886488558502369301890209409024238
#8192589661802505967445601156269611357743253160151881174534261909385786523336107297459181087938184397395871544586946369825031538687447933818934074140394214913943342349005226784121963117157099574700053233246917122374270667624336296658605180727228042012547093179282736308128150340470306250640110615492339403663857328349088640280638861498864139170520495908605680391060669816485916416654079752639445121595629288624100227278756572350936658560457324742536388457403301302799892917269420880784305863928928205610456970848375849959763461318463083835670391354788635773203347430164045382875473481551244866279809962026386427332005


#92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559
#97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637
#=
#9010912747277787249738727439840427055736519196538871349093408340706668231808840540195374015916168031416186859836416053338250477003776576736854137538279810042409758765948034443613881324504120707334213544491046703922409406729564516371394804946909037646047891880347940067132730874804943893719672960932378043325067514786209219718314429979032869544980643978919561908707109629612202311323626173343456843249212057093980583352634168733656443959925428846968193413110401346035535595817965624054783296380268863401241570313602685481219583686719199499297832165308522137209299081956650614940546284136240753995440003473611843518083


#totient =
#9010912747277787249738727439840427055736519196538871349093408340706668231808840540195374015916168031416186859836416053338250477003776576736854137538279810042409758765948034443613881324504120707334213544491046703922409406729564516371394804946909037646047891880347940067132730874804943893719672960932378043324877575934090934383537480859453188253291539686270935881039160668298044489030244356028174143765322586938365063530331798603113286673099000259440894881684231186302284225193426999907752867514204209640980817406669962746837092448906692344720572958732053915811402369526465666177954964908259624156431216201128207746888


#.000015258556235409006

c = '2205316413931134031046440767620541984801091216351222789180535786851451917462804449135087209259828503848304180574549372616172217553002988241140344023060716738565104171296716554122734607654513009667720334889869007276287692856645210293194853'

from decimal import *

minprec = 27
if len(c) > minprec: getcontext().prec = len(c)
else:                getcontext().prec = minprec

c = Decimal(c)
power = Decimal(1)/Decimal(3)

answer = c**power
ranswer = answer.quantize(Decimal('1.'), rounding=ROUND_UP)

diff = c - ranswer**Decimal(3)
if diff == Decimal(0):
    a=1
    #print("c is the cubic number of", ranswer)
else:
    a=1
    #print("c has a cubic root of ", answer)

#print(round(pow(c, 1/3)))
#print(round(c ** (1. / 3.)))


