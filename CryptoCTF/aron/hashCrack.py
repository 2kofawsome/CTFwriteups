#! python3.6

import hashlib, string, time

alphabet = string.ascii_lowercase
start = time.time()

while True:
    for n in alphabet:
        print(time.time()-start)
        start = time.time()
        for m in alphabet:
            for q in alphabet:
                for p in alphabet:
                    for x in alphabet:
                        for y in alphabet:
                            if hashlib.md5((n+m+q+p+x+y).encode()).hexdigest()[-6:] == "509231":
                                print(n+m+q+p+x+y)


def gg(tup, a, x):
        (_, p, g), n = tup, len(a)
        assert len(bin(x)[2:]) <= n
        X = bin(x)[2:].zfill(n)
        f_ax = g
        for i in range(1, n):
                f_ax *= pow(g, a[i] * int(X[i]), p)
        return f_ax % p

"""
********************************************************************************                                                                                                                                                             *
| hey! I have developed an efficient pseudorandom function, PRF, but it needs                                                                                                                                                                |
| deep tests for security points!! Try hard to break this PRF and get the flag!                                                                                                                                                              |
| In each step I will compute the f_a(n), f_a(n + 1), f_a(n + 2), f_a(n+3), and                                                                                                                                                              |
| f_a(n + 4) for secret verctor a, and for your given positive number 0 < n < p                                                                                                                                                              |
********************************************************************************                                                                                                                                                             *
| for n = 83651075925215564746214602611381993113, and with these PRF parameters:                                                                                                                                                             
| (p, g) = (0xea6b01252534f6aec2ba451dbd90d9d5, 0x4452a6519f7e6546fa2b4108265a9a                                                                                                                                                             49)
| the five consecutive random numbers generated by our secure PRF are:
| f_a(n + 0) = 20898818451596161558008471260466217113
| f_a(n + 1) = 120755584857335913422809056043212252370
| f_a(n + 2) = 239765999051856349918780668794768659501
| f_a(n + 3) = 233050713456790852199012056480726639977
| f_a(n + 4) = 171222583661966714945727960679513762874
| Options:
|       [G]uess next number!
|       [P]RF function
|       [N]ew numbers
|       [Q]uit






"""
